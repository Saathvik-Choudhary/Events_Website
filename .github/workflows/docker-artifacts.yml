name: Create Docker Deployment Artifacts

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build Docker images and create deployment artifacts
  build-and-package:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push frontend Docker image
      - name: Extract metadata for frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=sha,prefix=main-
            type=raw,value=latest

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: sports-events-frontend
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Build and push backend Docker image
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Extract metadata for backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=sha,prefix=main-
            type=raw,value=latest

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: sports-events-backend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Create deployment artifacts
      - name: Create deployment package
        run: |
          mkdir -p deployment
          
          # Create docker-compose.yml for deployment
          cat > deployment/docker-compose.yml << EOF
          version: '3.8'
          
          services:
            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
              ports:
                - "80:80"
              environment:
                - NODE_ENV=production
              restart: unless-stopped
              
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
              ports:
                - "8080:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=prod
              restart: unless-stopped
              depends_on:
                - frontend
          EOF
          
          # Create README for deployment
          cat > deployment/README.md << EOF
          # Sports Events Application Deployment
          
          This is the deployment package for the Sports Events application.
          
          ## Docker Images
          
          - Frontend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest\`
          - Backend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest\`
          
          ## Deployment
          
          To deploy this application:
          
          1. Ensure Docker and Docker Compose are installed
          2. Run: \`docker-compose up -d\`
          3. Access the application at http://localhost
          
          ## Services
          
          - Frontend: http://localhost (port 80)
          - Backend API: http://localhost:8080
          
          Built from commit: \`${{ github.sha }}\`
          Built on: \`${{ github.event.head_commit.timestamp }}\`
          EOF
          
          # Create deployment script
          cat > deployment/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Starting Sports Events Application deployment..."
          
          # Pull latest images
          echo "Pulling latest Docker images..."
          docker-compose pull
          
          # Start services
          echo "Starting services..."
          docker-compose up -d
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 10
          
          # Check if services are running
          if docker-compose ps | grep -q "Up"; then
            echo "✅ Deployment successful!"
            echo "Frontend: http://localhost"
            echo "Backend API: http://localhost:8080"
          else
            echo "❌ Deployment failed!"
            docker-compose logs
            exit 1
          fi
          EOF
          
          chmod +x deployment/deploy.sh

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-deployment-package
          path: deployment/
          retention-days: 30
